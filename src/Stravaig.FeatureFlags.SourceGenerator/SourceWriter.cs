using System.Text;
using Microsoft.CodeAnalysis;

namespace Stravaig.FeatureFlags.SourceGenerator;

public class SourceWriter
{
    internal void GenerateCode(SourceProductionContext productionContext, FeatureFlagsModel model)
    {
        StringBuilder fileContent = new StringBuilder();
        AddFileHeader(fileContent, model);
        AddNamespaceStart(fileContent, model.NamespaceName);
        AddStronglyTypedFeatureFlagClasses(fileContent, model);
        AddNamespaceEnd(fileContent, model.NamespaceName);
        WriteFeatureFlagClassesFile(productionContext, model, fileContent);

        if (!model.IncludeTestFakes)
            return;

        fileContent.Clear();
        AddFileHeader(fileContent, model);
        AddNamespaceStart(fileContent, model.NamespaceName, isTesting: true);
        AddTestingClasses(fileContent, model);
        AddNamespaceEnd(fileContent, model.NamespaceName);
        WriteFeatureFlagClassesFile(productionContext, model, fileContent, isTesting: true);
    }
    
    private void AddFileHeader(StringBuilder fileContent, FeatureFlagsModel model)
    {
        fileContent.AppendLine("// <auto-generated />");
        fileContent.AppendLine($"// Namespace: {model.NamespaceName}");
        fileContent.AppendLine($"// Enum: {model.EnumName}");
        fileContent.AppendLine($"// IncludeTestFakes: {model.IncludeTestFakes}");
        for (int i = 0; i < model.FeatureFlagNames.Length; i++)
            fileContent.AppendLine($"// FeatureFlagNames[{i}]: {model.FeatureFlagNames[i]}");
        fileContent.AppendLine();
    }
    
    private void AddNamespaceStart(StringBuilder fileContent, string? namespaceName, bool isTesting = false)
    {
        if (string.IsNullOrWhiteSpace(namespaceName))
            return;

        fileContent.Append($"namespace {namespaceName}");
        if (isTesting)
            fileContent.Append(".Testing");

        fileContent.AppendLine();
        fileContent.AppendLine("{");
    }
    
    private void AddStronglyTypedFeatureFlagClasses(StringBuilder fileContent, FeatureFlagsModel model)
    {
        foreach (var name in model.FeatureFlagNames)
        {
            fileContent.AppendLine(@$"    public interface I{name}FeatureFlag : Stravaig.FeatureFlags.IStronglyTypedFeatureFlag
    {{
    }}

    public sealed class {name}FeatureFlag : Stravaig.FeatureFlags.FeatureFlag, I{name}FeatureFlag
    {{
        public {name}FeatureFlag(Microsoft.FeatureManagement.IFeatureManager featureManager)
            : base(featureManager, ""{name}"")
        {{
        }}
    }}
");
        }
    }
    
    private void AddNamespaceEnd(StringBuilder fileContent, string? namespaceName)
    {
        if (string.IsNullOrWhiteSpace(namespaceName))
            return;
        fileContent.AppendLine("}");
    }
    
    private void WriteFeatureFlagClassesFile(
        SourceProductionContext productionContext,
        FeatureFlagsModel model,
        StringBuilder fileContent,
        bool isTesting = false)
    {
        var testing = isTesting ? ".Testing" : string.Empty;
        var enumName = model.EnumName;
        var fileName = $"{model.NamespaceName ?? "[global]"}{testing}.{enumName}.g.cs";
        var source = fileContent.ToString();
        productionContext.AddSource(fileName, source);
    }
    
    private void AddTestingClasses(StringBuilder fileContent, FeatureFlagsModel model)
    {
        foreach (var flagName in model.FeatureFlagNames)
        {
            fileContent.AppendLine(@$"
    public sealed class Fake{flagName}FeatureFlag : Stravaig.FeatureFlags.Testing.FakeFeatureFlag, I{flagName}FeatureFlag
    {{
        public static readonly Fake{flagName}FeatureFlag Enabled = new Fake{flagName}FeatureFlag(true);
        public static readonly Fake{flagName}FeatureFlag Disabled = new Fake{flagName}FeatureFlag(false);

        public Fake{flagName}FeatureFlag(bool state) : base(state)
        {{
        }}
    }}
");
        }
    }
}