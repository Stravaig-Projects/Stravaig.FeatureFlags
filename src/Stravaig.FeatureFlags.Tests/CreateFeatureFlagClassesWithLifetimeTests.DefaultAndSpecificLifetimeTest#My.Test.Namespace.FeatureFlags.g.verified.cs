//HintName: My.Test.Namespace.FeatureFlags.g.cs
// <auto-generated />

using Microsoft.FeatureManagement;
using Stravaig.FeatureFlags;

namespace My.Test.Namespace;
public interface ITheTransientFeatureFeatureFlag : IStronglyTypedFeatureFlag
{
}

public sealed class TheTransientFeatureFeatureFlag : FeatureFlag, ITheTransientFeatureFeatureFlag
{
    public TheTransientFeatureFeatureFlag(IFeatureManager featureManager)
        : base(featureManager, "TheTransientFeature")
    {
    }
}

public interface ITheScopedFeatureFeatureFlag : IStronglyTypedFeatureFlag
{
}

public sealed class TheScopedFeatureFeatureFlag : FeatureFlag, ITheScopedFeatureFeatureFlag
{
    public TheScopedFeatureFeatureFlag(IFeatureManager featureManager)
        : base(featureManager, "TheScopedFeature")
    {
    }
}

public interface ITheSingletonFeatureFeatureFlag : IStronglyTypedFeatureFlag
{
}

public sealed class TheSingletonFeatureFeatureFlag : FeatureFlag, ITheSingletonFeatureFeatureFlag
{
    public TheSingletonFeatureFeatureFlag(IFeatureManager featureManager)
        : base(featureManager, "TheSingletonFeature")
    {
    }
}

public interface ITheDefaultFeatureFeatureFlag : IStronglyTypedFeatureFlag
{
}

public sealed class TheDefaultFeatureFeatureFlag : FeatureFlag, ITheDefaultFeatureFeatureFlag
{
    public TheDefaultFeatureFeatureFlag(IFeatureManager featureManager)
        : base(featureManager, "TheDefaultFeature")
    {
    }
}


public static class FeatureFlagsServiceExtensions
{
    public static IFeatureManagementBuilder AddStronglyTypedFeatureFlags(this IFeatureManagementBuilder builder)
    {
        builder.Services.AddTransient<ITheTransientFeatureFeatureFlag, TheTransientFeatureFeatureFlag>();
        builder.Services.AddScoped<ITheScopedFeatureFeatureFlag, TheScopedFeatureFeatureFlag>();
        builder.Services.AddSingleton<ITheSingletonFeatureFeatureFlag, TheSingletonFeatureFeatureFlag>();
        builder.Services.AddScoped<ITheDefaultFeatureFeatureFlag, TheDefaultFeatureFeatureFlag>();
        return builder;
    }
}
